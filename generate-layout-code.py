#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

"""
Generates the .kmn keyboard code for to make the touch layout work properly.
"""

from syllabics import SYLLABICS
from plains_cree_constants import COMBINING_CONSONANTS, VOWELS


PREAMBLE = """
c AUTOGENERATED FILE - DO NOT MODIFY!
store(&VERSION) '10.0'
store(&TARGETS) 'iphone androidphone mobile'
store(&NAME) 'Plains Cree Syllabics Keyboard'
store(&COPYRIGHT) 'Copyright © 2019 National Research Council Canada'
store(&KEYBOARDVERSION) '0.1.0'
store(&LAYOUTFILE) 'nrc_cr_cans.keyman-touch-layout'

c TODO: Embed custom CSS?

begin Unicode > use(main)
group(main) using keys
""".strip()


print(PREAMBLE)

# Generate rules to switch the layout when a final is pressed.
#   + [U_XXXX] > U+XXXX layer('cV')
#   e.g. when [ ᐢ ] has been pressed, insert ᐢ and switch to 'sV' layer.
for consonant in COMBINING_CONSONANTS:
    final = SYLLABICS[consonant]
    keycode = final.as_keycode
    character = final.as_character
    layer = f"'{consonant}V'"
    # CV syllable:
    print(f"  + [{keycode}] > {character} layer({layer})", end=" ")
    print(f"\t\tc {final}")

    # CwV syllable:
    w = SYLLABICS["w"]
    w_keycode = w.as_keycode
    w_character = w.as_keycode
    layer = f"'{consonant}wV'"
    print(f"  {character} + [{w_keycode}] > {w_character} layer({layer})", end=" ")
    print(f"\tc {final} {w}")

print()

# Generate rules that replace a final and a vowel with the composed syllabic
#    U+XXXX + [U_YYYY] > U+YYYY layer('default')
#   e.g. when [ ᐘ ] has been pressed following a ᐤ, insert ᐘ and switch to 'default' layer.
for sro, syllabic in SYLLABICS.items():
    if not sro.endswith((*VOWELS,)):
        continue
    if not sro.startswith((*COMBINING_CONSONANTS, "w")):
        continue

    final = SYLLABICS[sro[0]]
    keycode = syllabic.as_keycode
    composed_syllable = syllabic.as_character

    if len(sro) == 2:
        w = ""
        context = final.as_character
    else:
        assert len(sro) == 3 and sro[1] == "w"
        w = " ᐤ"
        context = f"{final.as_character} {SYLLABICS['w'].as_character}"

    print(f"  {context} + [{keycode}] > {composed_syllable} layer('default')", end=" ")
    print(f"c {final}{w} + [ {syllabic} ] > {syllabic}")
